package com.example.gebruiker.inspectorgadget.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.gebruiker.inspectorgadget.database.Crime;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CRIME".
*/
public class CrimeDao extends AbstractDao<Crime, Long> {

    public static final String TABLENAME = "CRIME";

    /**
     * Properties of entity Crime.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property Solved = new Property(3, Boolean.class, "solved", false, "SOLVED");
        public final static Property Suspect = new Property(4, String.class, "suspect", false, "SUSPECT");
        public final static Property PicturePath = new Property(5, String.class, "picturePath", false, "PICTURE_PATH");
    };


    public CrimeDao(DaoConfig config) {
        super(config);
    }
    
    public CrimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CRIME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DATE\" INTEGER," + // 2: date
                "\"SOLVED\" INTEGER," + // 3: solved
                "\"SUSPECT\" TEXT," + // 4: suspect
                "\"PICTURE_PATH\" TEXT);"); // 5: picturePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CRIME\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Crime entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        Boolean solved = entity.getSolved();
        if (solved != null) {
            stmt.bindLong(4, solved ? 1L: 0L);
        }
 
        String suspect = entity.getSuspect();
        if (suspect != null) {
            stmt.bindString(5, suspect);
        }
 
        String picturePath = entity.getPicturePath();
        if (picturePath != null) {
            stmt.bindString(6, picturePath);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Crime readEntity(Cursor cursor, int offset) {
        Crime entity = new Crime( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // solved
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // suspect
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // picturePath
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Crime entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setSolved(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setSuspect(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPicturePath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Crime entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Crime entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
